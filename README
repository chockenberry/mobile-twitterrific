MobileTwitterrific.app
======================

Craig Hockenberry - 19.Aug.2007 - Initial version
Craig Hockenberry - 01.Sep.2007 - Added svn to get headers


Introduction
------------

This project is used to create a native iPhone application for using Twitter.

It's secondary purpose is to act as a "best practices" document for creating
native iPhone applications.

Environment
-----------

It is assumed that your "heavenly" frameworks are in /Developer/SDKs/heavenly
and that your SDK headers are in /Developer/SDKs/iPhone.

You'll also need to make sure that you have the ARM compilation tools in
/Developer/SDKs/iPhone/bin (arm-apple-darwin-cc and arm-apple-darwin-ld). I
used Kroo's toolchain installer (v0.4) from here:

<http://ellkro.jot.com/WikiHome/ToolchainInstallation>

It is assumed that you are using MacPorts to maintain your toolchain. With
this setup, the paths are:

/opt/local/arm-apple-darwin
	/bin		-- build tools: cc, ld, as and ar
	/etc		-- build tools configuration
	/heavenly	-- the frameworks extracted from the decrypted disk image
	/include	-- the framework include files for UIKit
	
We don't recommend using Kroo's Toolchain installer. In spite of it being an
excellent way to get up and running quickly, the installer places older
versions of the UIKit header files and screws up Subversion. You'll be
updating the UIKit headers often -- they change daily as people discover new
things. Keeping Subversion happy is very important.

To start installing the build tools, mount the decrypted disk image so that
"Heavenly1A543a.UserBundle" shows up on the desktop. If you need help getting
the disk image mounted, see these instructions:

<http://landonf.bikemonkey.org/code/iphone>

Now install the toolchain with MacPorts:
 
% sudo mkdir -p /opt/local/arm-apple-darwin/heavenly
% sudo cp -Rn /Volumes/Heavenly1A543a.UserBundle/ /opt/local/arm-apple-darwin/heavenly
% sudo port install arm-apple-darwin-binutils
% sudo port install arm-apple-darwin-cc

(Note: if you are having problems building with MacPorts after using Kroo's
installer, make sure to remove the iPhone and heavenly directories in
/Developer/SDKs and to remove "/Developer/SDKs/iPhone/bin" from your PATH.)

(Note: be sure to have the latest version of Xcode installed: v2.4.1. It can
be downloaded from ADC.)

Get the latest header files with:

% sudo svn checkout \
	http://svn.berlios.de/svnroot/repos/iphone-binutils/trunk/include \
	/Developer/SDKs/iPhone/include

% sudo svn checkout \
	http://svn.berlios.de/svnroot/repos/iphone-binutils/trunk/include \
	/opt/local/arm-apple-darwin/include

Then symlink CoreGraphics:

% sudo ln -s \
	/System/Library/Frameworks/ApplicationServices.framework/Frameworks/CoreGraphics.framework/Headers/ \
	/Developer/SDKs/iPhone/include/CoreGraphics

% sudo ln -s \
	/System/Library/Frameworks/ApplicationServices.framework/Frameworks/CoreGraphics.framework/Headers/ \
	/opt/local/arm-apple-darwin/include/CoreGraphics

If you have problems compiling, make sure that you have include/WebCore and
that include/CarbonCore has headers (and not .diff files.) Finally, you may
need to comment out some #include "NSObject.h" in Celestial and WebCore.

% sudo mkdir /opt/local/arm-apple-darwin/lib
% sudo cp /Developer/SDKs_old/iPhone/lib/libarmfp.dylib /opt/local/arm-apple-darwin/lib

% sudo mkdir /opt/local/arm-apple-darwin/csu
% sudo cp /Developer/SDKs_old/iPhone/csu/crt1.o /opt/local/arm-apple-darwin/csu



Building
--------

Open the MobileTwitterrificApp.xcodeproj and build. The project is built using
the Makefile in the project's root directory.

If you add files to the project, you need to update the SOURCES in the
the Makefile. They will not automatically be added to the build. Until there
is better Xcode integration with the iPhone toolchain, that's the way it
has to be.

Note also that there aren't any precompiled headers and there is isn't any
code index. So builds will get slower as the project size increases and you'll
be sorely disappointed by what you see when you hit the ESC key while editing
(no code completion.)

After the build completes, you'll find the iPhone application package in
the build/Release folder. The final build step uses scp to get the application
onto the iPhone in the /Applications folder: you'll need to update the command
in the Makefile to suit your local environment.

Debugging
---------

NSLog. Learn to love it, since printf is all you have at the moment.

otool can also be handy for what's in the executable.

